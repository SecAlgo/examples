import sys
import doubleratchet.doubleratchet_lib as DR
import doubleratchet.doubleratchet_ext as EXT
import x3dh.x3dh_lib as X3DH

ONETIME_PREKEYS = 5

class RoleA(process):
    def setup(B, S):
        self.IKP_A, self.IK_A = X3DH.keygen()
        self.state_A = EXT.state()

    def fetch_prekey_bundle(b, s):
        send(('request', b), to = s)
        await(some(received(('reply', keybundle_b), from_ = _s)))
        return keybundle_b

    def verify_keybundle(IK_b, sig_b):
        return X3DH.verify(X3DH.decode(IK_b), sig_b)

    def generate_shared_secret(IK_b, SPK_b, OPK_b):
        EKP_A, EPK_A = X3DH.keygen()
        DH1 = X3DH.dh(self.IKP_A, X3DH.decode(SPK_b))
        DH2 = X3DH.dh(EKP_A, X3DH.decode(IK_b))
        DH3 = X3DH.dh(EKP_A, X3DH.decode(SPK_b))
        DHF = DH1 + DH2 + DH3
        if OPK_b != None:
            DH4 = X3DH.dh(EKP_A, X3DH.decode(OPK_b))
            DHF = DHF + DH4
        return X3DH.kdf(DHF), EPK_A
        
    def run():
        IK_B, SPK_B, sig_B, (lbl, OPK_B) = fetch_prekey_bundle(B, S)
        if verify_keybundle(IK_B, sig_B):
            SK, EPK_A = generate_shared_secret(IK_B, SPK_B, OPK_B)
            AD = X3DH.encode(self.IK_A) + IK_B
            DR.RatchetInitAlice(self.state_A, SK, SPK_B[1:])
            init_message = b'This is a secret'
            send(('init', (X3DH.encode(self.IK_A), X3DH.encode(EPK_A), lbl,
                           DR.RatchetEncrypt(self.state_A, init_message, AD))), to = B)

class RoleB(process):
    def setup(S):
        self.IKP_B, self.IK_B = X3DH.keygen()
        self.SKP_B, self.SPK_B = X3DH.keygen()
        self.onetime_private_prekeys = dict()
        self.oldSKP_B = None
        self.maxKeyID = 0
        self.state_B = EXT.state()

    def generate_onetime_prekeys():
        onetime_public_prekeys = set()
        for i in range(ONETIME_PREKEYS):
            newKP, newPK = X3DH.keygen()
            newKeyID = 'Bob' + str(self.maxKeyID + i)
            self.onetime_private_prekeys[newKeyID] = newKP
            onetime_public_prekeys.add((newKeyID, X3DH.encode(newPK)))
        self.maxKeyID += i
        return onetime_public_prekeys

    def publish_keys():
        onetime_prekeys = generate_onetime_prekeys()
        send(('publish', (X3DH.encode(self.IK_B), X3DH.encode(self.SPK_B),
                          X3DH.sign(self.IKP_B, X3DH.encode(self.SPK_B)),
                          onetime_prekeys)), to = S)

    def update_onetime_prekeys():
        onetime_prekeys = generate_onetime_prekeys()
        send(('update_onetime_prekeys', onetime_prekeys), to = S)

    def update_signedprekey():
        self.oldSKP_B = self.SKP_B
        self.SKP_B. self.SPK_B = X3DH.keygen()
        send(('update_signed_prekey',
              (X3DH.encode(self.SPK_B),
               X3DH.sign(self.IKP_B, X3DH.encode(self.SPK_B)))), to = S)

    def generate_shared_secret(IK_a, EPK_a, lbl): 
        OKP_B = self.onetime_private_prekeys[lbl]
        DH1 = X3DH.dh(self.SKP_B, X3DH.decode(IK_a))
        DH2 = X3DH.dh(self.IKP_B, X3DH.decode(EPK_a))
        DH3 = X3DH.dh(self.SKP_B, X3DH.decode(EPK_a))
        DHF = DH1 + DH2 + DH3
        if lbl != None:
            DH4 = X3DH.dh(OKP_B, X3DH.decode(EPK_a))
            DHF = DHF + DH4
        return X3DH.kdf(DHF)
        
    def run():
        publish_keys()
        await(False)

    def receive(msg=('prekeys_exhausted'), from_ = S):
        update_onetime_prekeys()

    def receive(msg=('init', (IK_A, EPK_A, lbl, (hdr, enc_msg))), from_ = A):
        SK = generate_shared_secret(IK_A, EPK_A, lbl)
        DR.RatchetInitBob(self.state_B, SK, self.SKP_B)
        AD = IK_A + X3DH.encode(IK_B)
        init_msg = DR.RatchetDecrypt(self.state_B, hdr, enc_msg, AD)
        output(init_msg)
        
class RoleS(process):
    def setup():
        self.keybundles = dict()

    def run():
        await(False)

    def receive(msg=('publish', keybundle), from_ = B):
        self.keybundles[B] = keybundle

    def receive(msg=('update_signed_prekey', (new_signed_prekey, new_sig)), from_ = B):
        oldBundle = self.keybundles[B]
        newBundle = (oldBundle[0], new_signed_prekey, new_sig, oldBundle[3])
        self.keybundles[B] = newBundle

    def receive(msg=('update_onetime_prekeys', new_onetime_keys), from_ = B):
        oldBundle = self.keybundles[B]
        newBundle = (oldBundle[0], oldBundle[1], oldBundle[2],
                     oldBundle[3] | new_onetime_keys)
        self.keybundles[B] = newBundle

    def receive(msg=('request', B), from_ = A):
        IK_B, SPK_B, sig_B, onetime_prekeys_B = self.keybundles[B]        
        if len(onetime_prekeys_B) > 0:
            send(('reply', (IK_B, SPK_B, sig_B, onetime_prekeys_B.pop())), to = A)
            if len(onetime_prekeys_B) == 0:
                send(('prekeys_exhausted'), to = B)
        else:
            send(('reply', (IK_B, SPK_B, sig_B, (None, None))), to = A)
        
def main():
    S = new(RoleS, ())
    B = new(RoleB, (S,))
    A = new(RoleA, (B, S))
    start(S)
    start(B)
    start(A)
